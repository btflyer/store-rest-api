{
	"info": {
		"_postman_id": "c4fa4a68-e68d-44aa-be72-85af6ca46368",
		"name": "User create store and item",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "User create store and item Copy",
			"item": [
				{
					"name": "/register user5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"postman.clearEnvironmentVariable(\"access_token\");",
									"",
									"tests[\"Response time is less than 200ms\"] = responseTime < 200;",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"User created successfully\"] = jsonData.message === 'User created successfully.';",
									"",
									"tests[\"Content-Type is present in response\"] = postman.getResponseHeader('Content-Type');",
									"tests[\"Content-Type is 'application/json'\"] = postman.getResponseHeader('Content-Type') === 'application/json'; "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"user5\",\n\t\"password\": \"123#!!\"\n}"
						},
						"url": {
							"raw": "{{url}}/register",
							"host": [
								"{{url}}"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "/auth user5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"postman.setEnvironmentVariable(\"access_token\", jsonData.access_token);",
									"",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Body contains access token\"] = responseBody.has(\"access_token\");",
									"",
									"tests[\"Response time is less than 150ms\"] = responseTime < 150;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"username\": \"user5\",\n\t\"password\": \"123#!!\"\n}"
						},
						"url": {
							"raw": "{{url}}/auth",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth"
							]
						},
						"description": "Authenticate the user for login"
					},
					"response": []
				},
				{
					"name": "/store/my_test_store",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Response time is less than 200ms\"] = responseTime < 150;",
									"tests[\"Content-Type is present in response\"] = postman.getResponseHeader('Content-Type');",
									"tests[\"Content-Type is 'application/json'\"] = postman.getResponseHeader('Content-Type') === 'application/json'; ",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"Status code is 201 (created)\"] = responseCode.code === 201;",
									"tests[\"Store created successfully - name\"] = jsonData.name === \"my_test_store\";",
									"tests[\"Store created successfully - id\"] = jsonData.id == 1;",
									"tests[\"Store created successfully - empty\"] = jsonData.items.length == 0;",
									"postman.setEnvironmentVariable(\"store_id\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{url}}/store/my_test_store",
							"host": [
								"{{url}}"
							],
							"path": [
								"store",
								"my_test_store"
							]
						},
						"description": "create a new store"
					},
					"response": []
				},
				{
					"name": "/item/my_test_item",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Content-Type is present in response\"] = postman.getResponseHeader('Content-Type');",
									"tests[\"Content-Type is 'application/json'\"] = postman.getResponseHeader('Content-Type') === 'application/json'; ",
									"tests[\"Status code is 201\"] = responseCode.code === 201;",
									"tests[\"Item created successfully - name\"] = jsonData.name === \"my_test_item\";",
									"tests[\"Item created successfully - price\"] = jsonData.price === 17.99;"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"price\": 17.99,\n\t\"store_id\": {{store_id}}\n}"
						},
						"url": {
							"raw": "{{url}}/item/my_test_item",
							"host": [
								"{{url}}"
							],
							"path": [
								"item",
								"my_test_item"
							]
						},
						"description": "post testitem"
					},
					"response": []
				},
				{
					"name": "/stores Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Content-Type is present in response\"] = postman.getResponseHeader('Content-Type');",
									"tests[\"Content-Type is 'application/json'\"] = postman.getResponseHeader('Content-Type') === 'application/json'; ",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Store list returned successfully\"] = jsonData.stores.length === 1 && jsonData.stores[0].name === \"my_test_store\";",
									"tests[\"ID of 'my_test_store' is correct\"] = jsonData.stores[0].id === parseInt(environment.store_id);",
									"tests[\"Item 'my_test_item' returned in 'my_test_store\"] = jsonData.stores[0].items[0].name === \"my_test_item\";",
									"tests[\"Item 'my_test_item' price is returned in 'my_test_store\"] = jsonData.stores[0].items[0].price === 17.99;",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/stores",
							"host": [
								"{{url}}"
							],
							"path": [
								"stores"
							]
						},
						"description": "get a list of stores"
					},
					"response": []
				},
				{
					"name": "/item/<name> Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"tests[\"Content-Type is present in response\"] = postman.getResponseHeader('Content-Type');",
									"tests[\"Content-Type is 'application/json'\"] = postman.getResponseHeader('Content-Type') === 'application/json'; ",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Item deleted successfully\"] = jsonData.message === \"Item deleted\";"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/item/my_test_item",
							"host": [
								"{{url}}"
							],
							"path": [
								"item",
								"my_test_item"
							]
						},
						"description": "Delete test item"
					},
					"response": []
				},
				{
					"name": "/store/<name> Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"jsonData = JSON.parse(responseBody);",
									"tests[\"Content-Type is present in response\"] = postman.getResponseHeader('Content-Type');",
									"tests[\"Content-Type is 'application/json'\"] = postman.getResponseHeader('Content-Type') === 'application/json'; ",
									"tests[\"Status code is 200\"] = responseCode.code === 200;",
									"tests[\"Store deleted successfully\"] = jsonData.message === 'Store deleted';"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/store/my_test_store",
							"host": [
								"{{url}}"
							],
							"path": [
								"store",
								"my_test_store"
							]
						},
						"description": "delete teststore"
					},
					"response": []
				}
			]
		}
	]
}